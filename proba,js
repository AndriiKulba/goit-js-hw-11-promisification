/*
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞
 *  - –ö–ª–∞—Å—Å Promise
 *  - resolve
 *  - reject
 *  - Promise.prototype.then(onResolve, onReject)
 */

const promise = new Promise((resolve, reject) => {
  const canFulfill = Math.random() > 0.5;

  setTimeout(() => {
    if (canFulfill) {
      resolve('–ü—Ä–æ–º–∏—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ, —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–∏—Å–ø–æ–ª–Ω–µ–Ω, fulfilled)');
    }

    reject('–ü—Ä–æ–º–∏—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–æ—Ç–∫–ª–æ–Ω—ë–Ω, rejected)');
  }, 1000);
});

// promise.then(onFulfilled, onRejected);

function onFulfilled(result) {
  console.log('onFulfilled -> onFulfilled');
  console.log(`‚úÖ ${result}`);
}

function onRejected(error) {
  console.log('onRejected -> onRejected');
  console.log(`‚ùå ${error}`);
}

/*
 * –¶–µ–ø–æ—á–∫–∏ –ø—Ä–æ–º–∏—Å–æ–≤ (chaining)
 * Promise.prototype.catch(error)
 * Promise.prototype.finally()
 */

promise
  .then(onFulfilled)
  .then(x => {
    console.log(x);

    return 10;
  })
  .then(y => {
    console.log(y);
  })
  .catch(error => console.log(error))
  .finally(() => console.log('–Ø –±—É–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ'));



  ///////////////////////////////////////////////////////////////

  /*
 * –ü—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:
 * - –ü–æ–±–ª–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—Ä–æ–º–∏—Å–∞ —Å –∫–æ–ª–±–µ–∫–æ–º
 * - –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å
 */

// const makeOrder = dish => {
//   const DELAY = 1000;

//   return new Promise((resolve, reject) => {
//     const passed = Math.random() > 0.5;

//     setTimeout(() => {
//       if (passed) {
//         resolve(`‚úÖ –í–æ—Ç –≤–∞—à –∑–∞–∫–∞–∑: ${dish}`);
//       }

//       reject('‚ùå –£–ø—Å, —É –Ω–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–æ–¥—É–∫—Ç—ã');
//     }, DELAY);
//   });
// };

// makeOrder('–ø–∏—Ä–æ–∂–æ–∫').then(onMakeOrderSuccess).catch(onMakeOrderError);

// function onMakeOrderSuccess(result) {
//   console.log('onMakeOrderSuccess');
//   console.log(result);
// }

// function onMakeOrderError(error) {
//   console.log('onMakeOrderError');
//   console.log(error);
// }

/*
 * –ü—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ¬´—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö¬ª —Ñ—É–Ω–∫—Ü–∏–π
 * - Promise.resolve()
 * - Promise.reject()
 */

// const makeOrder = dish => {
//   return Promise.resolve(`‚úÖ –í–æ—Ç –≤–∞—à –∑–∞–∫–∞–∑: ${dish}`);
// };

// makeOrder('–ø–∏—Ä–æ–∂–æ–∫').then(onMakeOrderSuccess);

// function onMakeOrderSuccess(result) {
//   console.log('onMakeOrderSuccess');
//   console.log(result);
// }

// function onMakeOrderError(error) {
//   console.log('onMakeOrderError');
//   console.log(error);
// }

/*
 * –ü–æ–∫–µ–º–æ–Ω—ã —Å https://pokeapi.co/
 */

// const fetchPokemonById = id => {
//   return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(r => r.json());
// };

// fetchPokemonById(1).then(onFetchSuccess).catch(onFetchError);

// fetchPokemonById(2).then(onFetchSuccess).catch(onFetchError);

// fetchPokemonById(3).then(onFetchSuccess).catch(onFetchError);

// function onFetchSuccess(pokemon) {
//   console.log('onFetchSuccess -> onFetchSuccess');
//   console.log(pokemon);
// }

// function onFetchError(error) {
//   console.log('onFetchError -> onFetchError');
//   console.log('–≠—Ç–æ –≤ –±–ª–æ–∫–µ catch');
//   console.log(error);
// }

// makePromise
// const makePromise = () => {
//   return new Promise((resolve, reject) => {
//     const passed = Math.random() > 0.5;

//     setTimeout(() => {
//       if (passed) {
//         resolve('‚úÖ –ö—É–∫—É —ç—Ç–æ resolve');
//       }

//       reject('‚ùå –≤—Å–µ –ø—Ä–æ–ø–∞–ª–æ —ç—Ç–æ reject');
//     }, 2000);
//   });
// };

// makePromise()
//   .then(result => console.log(result))
//   .catch(error => console.log(error));

//////////////////////////////////////////////////////
import '../css/common.css';

const horses = [
  'Secretariat',
  'Eclipse',
  'West Australian',
  'Flying Fox',
  'Seabiscuit',
];

let raceCounter = 0;
const refs = {
  startBtn: document.querySelector('.js-start-race'),
  winnerField: document.querySelector('.js-winner'),
  progressField: document.querySelector('.js-progress'),
  tableBody: document.querySelector('.js-results-table > tbody'),
};

refs.startBtn.addEventListener('click', onStart);

function onStart() {
  raceCounter += 1;
  const promises = horses.map(run);

  updateWinnerField('');
  updateProgressField('ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!');
  determineWinner(promises);
  waitForAll(promises);
}

function determineWinner(horsesP) {
  Promise.race(horsesP).then(({ horse, time }) => {
    updateWinnerField(`üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time}
    –≤—Ä–µ–º–µ–Ω–∏`);
    updateResultsTable({ horse, time, raceCounter });
  });
}

function waitForAll(horsesP) {
  Promise.all(horsesP).then(() => {
    updateProgressField('üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.');
  });
}

function updateWinnerField(message) {
  refs.winnerField.textContent = message;
}

function updateProgressField(message) {
  refs.progressField.textContent = message;
}

function updateResultsTable({ horse, time, raceCounter }) {
  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;
  refs.tableBody.insertAdjacentHTML('beforeend', tr);
}

/*
 * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞
 */

/*
 * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤
 */

function run(horse) {
  return new Promise(resolve => {
    const time = getRandomTime(2000, 3500);

    setTimeout(() => {
      resolve({ horse, time });
    }, time);
  });
}

function getRandomTime(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}
